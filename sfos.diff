diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5f0a3f97..6e60bb42 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,7 +15,7 @@ set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/modules")
 
 find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Network Xml)
-find_package(Qt${QT_VERSION_MAJOR} 5.9.2 REQUIRED COMPONENTS Core Network Xml)
+find_package(Qt${QT_VERSION_MAJOR} 5.6.0 REQUIRED COMPONENTS Core Network Xml)
 
 set(CMAKE_AUTOMOC ON)
 set(CMAKE_AUTORCC ON)
diff --git a/src/base/QXmppFutureUtils_p.h b/src/base/QXmppFutureUtils_p.h
index 2551be67..06b0333c 100644
--- a/src/base/QXmppFutureUtils_p.h
+++ b/src/base/QXmppFutureUtils_p.h
@@ -24,7 +24,8 @@
 #include <QFutureWatcher>
 #include <QObject>
 
-namespace QXmpp::Private {
+namespace QXmpp {
+namespace Private {
 
 // helper for std::visit
 template<class... Ts>
@@ -191,6 +192,6 @@ auto mapSuccess(std::variant<T, Err> var, Function lambda)
                       std::move(var));
 }
 
-}  // namespace QXmpp::Private
+}}  // namespace QXmpp::Private
 
 #endif  // QXMPPFUTUREUTILS_P_H
diff --git a/src/base/QXmppMixItems.cpp b/src/base/QXmppMixItems.cpp
index e08dd3f2..154ac22d 100644
--- a/src/base/QXmppMixItems.cpp
+++ b/src/base/QXmppMixItems.cpp
@@ -140,7 +140,7 @@ bool QXmppMixInfoItem::isItem(const QDomElement &element)
 {
     return QXmppPubSubItem::isItem(element, [](const QDomElement &payload) {
         // check FORM_TYPE without parsing a full QXmppDataForm
-        if (payload.tagName() != u'x' || payload.namespaceURI() != ns_data) {
+        if (payload.tagName() != QChar('x') || payload.namespaceURI() != ns_data) {
             return false;
         }
         for (auto fieldEl = payload.firstChildElement();
diff --git a/src/base/QXmppPubSubEvent.h b/src/base/QXmppPubSubEvent.h
index eca43fb6..7eb9d0b6 100644
--- a/src/base/QXmppPubSubEvent.h
+++ b/src/base/QXmppPubSubEvent.h
@@ -138,7 +138,8 @@ void QXmppPubSubEvent<T>::parseItems(const QDomElement &parent)
 template<typename T>
 void QXmppPubSubEvent<T>::serializeItems(QXmlStreamWriter *writer) const
 {
-    for (const auto &item : qAsConst(m_items)) {
+    //for (const auto &item : qAsConst(m_items)) {
+    for (const auto &item : const_cast<const QVector<T>&>(m_items)) {
         item.toXml(writer);
     }
 }
diff --git a/src/base/QXmppPubSubIq.h b/src/base/QXmppPubSubIq.h
index ac33766a..7f6a00d8 100644
--- a/src/base/QXmppPubSubIq.h
+++ b/src/base/QXmppPubSubIq.h
@@ -87,7 +87,7 @@ protected:
     static bool isPubSubIq(const QDomElement &element,
                            bool (*isItemValid)(const QDomElement &));
 
-    void parseElementFromChild(const QDomElement &) override;
+    void parseElementFromChild(const QDomElement &);
     void toXmlElementFromChild(QXmlStreamWriter *writer) const override;
 
     virtual void parseItems(const QDomElement &queryElement) = 0;
diff --git a/src/base/QXmppSasl.cpp b/src/base/QXmppSasl.cpp
index d8a86bb0..c4e5e4fe 100644
--- a/src/base/QXmppSasl.cpp
+++ b/src/base/QXmppSasl.cpp
@@ -24,7 +24,7 @@ static const QMap<QString, QCryptographicHash::Algorithm> SCRAM_ALGORITHMS = {
     { QStringLiteral("SCRAM-SHA-1"), QCryptographicHash::Sha1 },
     { QStringLiteral("SCRAM-SHA-256"), QCryptographicHash::Sha256 },
     { QStringLiteral("SCRAM-SHA-512"), QCryptographicHash::Sha512 },
-    { QStringLiteral("SCRAM-SHA3-512"), QCryptographicHash::RealSha3_512 },
+//    { QStringLiteral("SCRAM-SHA3-512"), QCryptographicHash::RealSha3_512 },
 };
 
 // Returns the hash length in bytes (QCH::hashLength() only exists since 5.12).
@@ -39,7 +39,7 @@ int hashLength(QCryptographicHash::Algorithm algorithm)
     case QCryptographicHash::Sha256:
         return 256 / 8;
     case QCryptographicHash::Sha512:
-    case QCryptographicHash::RealSha3_512:
+//    case QCryptographicHash::RealSha3_512:
         return 512 / 8;
     default:
         return QCryptographicHash::hash({}, algorithm).size();
@@ -288,7 +288,7 @@ QXmppSaslClient::~QXmppSaslClient()
 QStringList QXmppSaslClient::availableMechanisms()
 {
     return {
-        QStringLiteral("SCRAM-SHA3-512"),
+        //QStringLiteral("SCRAM-SHA3-512"),
         QStringLiteral("SCRAM-SHA-512"),
         QStringLiteral("SCRAM-SHA-256"),
         QStringLiteral("SCRAM-SHA-1"),
diff --git a/src/base/QXmppStream.cpp b/src/base/QXmppStream.cpp
index 6b5d9589..01ace975 100644
--- a/src/base/QXmppStream.cpp
+++ b/src/base/QXmppStream.cpp
@@ -326,7 +326,8 @@ void QXmppStream::setSocket(QSslSocket *socket)
 #if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
     connect(socket, &QSslSocket::errorOccurred, this, &QXmppStream::_q_socketError);
 #else
-    connect(socket, QOverload<QAbstractSocket::SocketError>::of(&QSslSocket::error), this, &QXmppStream::_q_socketError);
+    //connect(socket, QOverload<QAbstractSocket::SocketError>::of(&QSslSocket::error), this, &QXmppStream::_q_socketError);
+    connect(socket, static_cast<void (QAbstractSocket::*)(QAbstractSocket::SocketError)>(&QSslSocket::error), this, &QXmppStream::_q_socketError);
 #endif
     connect(socket, &QIODevice::readyRead, this, &QXmppStream::_q_socketReadyRead);
 }
diff --git a/src/base/QXmppUtils.cpp b/src/base/QXmppUtils.cpp
index 7ae74ba3..dfca8ed0 100644
--- a/src/base/QXmppUtils.cpp
+++ b/src/base/QXmppUtils.cpp
@@ -108,9 +108,12 @@ QDateTime QXmppUtils::datetimeFromString(const QString &str)
 ///
 QString QXmppUtils::datetimeToString(const QDateTime &dt)
 {
+    // https://stackoverflow.com/questions/9527960/how-do-i-construct-an-iso-8601-datetime-in-c
+#if 0
     if (dt.time().msec()) {
         return dt.toUTC().toString(Qt::ISODateWithMs);
     }
+#endif
     return dt.toUTC().toString(Qt::ISODate);
 }
 
diff --git a/src/client/QXmppOutgoingClient.cpp b/src/client/QXmppOutgoingClient.cpp
index 271ec8b9..eb879048 100644
--- a/src/client/QXmppOutgoingClient.cpp
+++ b/src/client/QXmppOutgoingClient.cpp
@@ -173,11 +173,13 @@ QXmppOutgoingClient::QXmppOutgoingClient(QObject *parent)
     setSocket(socket);
 
     connect(socket, &QAbstractSocket::disconnected, this, &QXmppOutgoingClient::_q_socketDisconnected);
-    connect(socket, QOverload<const QList<QSslError> &>::of(&QSslSocket::sslErrors), this, &QXmppOutgoingClient::socketSslErrors);
+    //connect(socket, QOverload<const QList<QSslError> &>::of(&QSslSocket::sslErrors), this, &QXmppOutgoingClient::socketSslErrors);
+    connect(socket, static_cast<void (QSslSocket::*)(const QList<QSslError>&)>(&QSslSocket::sslErrors), this, &QXmppOutgoingClient::socketSslErrors);
 #if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
     connect(socket, &QSslSocket::errorOccurred, this, &QXmppOutgoingClient::socketError);
 #else
-    connect(socket, QOverload<QAbstractSocket::SocketError>::of(&QSslSocket::error), this, &QXmppOutgoingClient::socketError);
+    //connect(socket, QOverload<QAbstractSocket::SocketError>::of(&QSslSocket::error), this, &QXmppOutgoingClient::socketError);
+    connect(socket, static_cast<void (QAbstractSocket::*)(QAbstractSocket::SocketError)>(&QSslSocket::error), this, &QXmppOutgoingClient::socketError);
 #endif
 
     // DNS lookups
diff --git a/src/client/QXmppTransferManager.cpp b/src/client/QXmppTransferManager.cpp
index ac138986..fa77c3b6 100644
--- a/src/client/QXmppTransferManager.cpp
+++ b/src/client/QXmppTransferManager.cpp
@@ -1208,7 +1208,8 @@ void QXmppTransferManager::_q_jobStateChanged(QXmppTransferJob::State state)
     }
 
     // the job was accepted by the local party
-    connect(job, QOverload<QXmppTransferJob::Error>::of(&QXmppTransferJob::error), this, &QXmppTransferManager::_q_jobError);
+    //connect(job, QOverload<QXmppTransferJob::Error>::of(&QXmppTransferJob::error), this, &QXmppTransferManager::_q_jobError);
+    connect(job, static_cast<void (QXmppTransferJob::*)(QXmppTransferJob::Error)>(&QXmppTransferJob::error), this, &QXmppTransferManager::_q_jobError);
 
     QXmppDataForm form;
     form.setType(QXmppDataForm::Submit);
@@ -1341,7 +1342,9 @@ QXmppTransferJob *QXmppTransferManager::sendFile(const QString &jid, QIODevice *
     d->jobs.append(job);
 
     connect(job, &QObject::destroyed, this, &QXmppTransferManager::_q_jobDestroyed);
-    connect(job, QOverload<QXmppTransferJob::Error>::of(&QXmppTransferJob::error), this, &QXmppTransferManager::_q_jobError);
+    //connect(job, QOverload<QXmppTransferJob::Error>::of(&QXmppTransferJob::error), this, &QXmppTransferManager::_q_jobError);
+    connect(job, static_cast<void (QXmppTransferJob::*)(QXmppTransferJob::Error)>(&QXmppTransferJob::error), this, &QXmppTransferManager::_q_jobError);
+
     connect(job, &QXmppTransferJob::finished, this, &QXmppTransferManager::_q_jobFinished);
 
     QXmppStreamInitiationIq request;
diff --git a/src/server/QXmppOutgoingServer.cpp b/src/server/QXmppOutgoingServer.cpp
index 49e6f4b2..26708f56 100644
--- a/src/server/QXmppOutgoingServer.cpp
+++ b/src/server/QXmppOutgoingServer.cpp
@@ -50,7 +50,11 @@ QXmppOutgoingServer::QXmppOutgoingServer(const QString &domain, QObject *parent)
 #if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
     connect(socket, &QSslSocket::errorOccurred, this, &QXmppOutgoingServer::socketError);
 #else
-    connect(socket, QOverload<QAbstractSocket::SocketError>::of(&QSslSocket::error), this, &QXmppOutgoingServer::socketError);
+    // https://stackoverflow.com/questions/16794695/connecting-overloaded-signals-and-slots-in-qt-5
+    // https://riptutorial.com/qt/example/17048/connecting-overloaded-signals-slots
+    //connect(socket, QOverload<QAbstractSocket::SocketError>::of(&QSslSocket::error), this, &QXmppOutgoingServer::socketError);
+    connect(socket, static_cast<void (QAbstractSocket::*)(QAbstractSocket::SocketError)>(&QSslSocket::error), this, &QXmppOutgoingServer::socketError);
+
 #endif
 
     // DNS lookups
@@ -64,7 +68,8 @@ QXmppOutgoingServer::QXmppOutgoingServer(const QString &domain, QObject *parent)
     d->localDomain = domain;
     d->ready = false;
 
-    connect(socket, QOverload<const QList<QSslError> &>::of(&QSslSocket::sslErrors), this, &QXmppOutgoingServer::slotSslErrors);
+    //connect(socket, QOverload<const QList<QSslError> &>::of(&QSslSocket::sslErrors), this, &QXmppOutgoingServer::slotSslErrors);
+    connect(socket, static_cast<void (QSslSocket::*)(const QList<QSslError>&)>(&QSslSocket::sslErrors), this, &QXmppOutgoingServer::slotSslErrors);
 }
 
 /// Destroys the stream.
